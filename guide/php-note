CORE(syntaxe){
  <?php
    //code PHP;
  ?>
}

VARIABLE{
  //DECLARATION{
    $var0 = 10;
    $var1 = 20;
    $sumResult = $var0 + $var1;
    echo "result = $sumResult"; //output => result = 30
    define ("varConst", "chaine de caractere");
  //info php{
    <.?php

    phpinfo();
  }
  }

  //TYPES{
    - string: $varStr = "string type"; 
    - integer(int): $varInt = 7;
    - float: $varFlt = 3.14;
    - boolean: $varBol = true;
    - array: $varTab = array("elem0", "elem1", ... , "elemN");
    - null: pas de valeur (undefined/vide)
    - object: $instance0 = new myObject();

    //note: on ne peut pas faire "echo" directement un ARRAY (ex: echo $varTab)

    //fonction_variable(native){

      - var_dump(<var>): retourner le "type|length" d'une variable en argument
      - strlen(<var>): compter le nombre de caractere dans la variable en argument
      - str_word_count(<var>): compter le nombre de mot dans la variable en argument
      - strrev(<var>: reverser tout les chaines de caractere de la variabele en argument
      - strpos(<var>,"<value>"): retourner la position de "<value>" dans la variable <var>
      - count(<var_array>): retourne le nombre d'element d'un tableau

    }
  }
}

READ&WRITE{
  //READ{
 
  }

  //WRITE{
    $pers = "world";
    echo "Hello $pers !"; //output => hello world !
    echo 'Hello $pers !'; //output => hello $pers !
    echo 'Hello ' . $pers . ' !' //output => hello world !
  
    //note: une simple quote '$var' va interpreter directement le nom de la variable ($var) mais pas sa valeur, sinon vous serez obliger d'utiliser la concatenation "." 
  } 
}

SCOPES(portee){
    //3 TYPES DE SCOPES en PHP{

      - global: en dehors d'une bloc de code (condition, boucle, fonction, ...)
      - local: dans une bloc de code 
      - static: va stocker la derniere valeur de la variable declarer comme static
  
    }

    //note: lorsqu'une variable est declarer dans une scope global (variable global), on ne peut pas acceder dans cette variable via une scope local ET IVERSSEMENT

    //DECLARATION d'une variable global: On utilise le mot cle "global" avant la variable (ex: global $varGlob;)
    //On peut declarer un tableau qui contient toute les variables qu'on veut declarer comme global par $GLOBALS['varGlob'] (pas de $ sur la variable)

    //Exemple{

      exemple(global){
       //variable
       $my_var0 = 10;
       $my_var1 = 20;

       function myFunc(){
         global $my_var0;
         global $my_var1;
         echo $my_var0 + $my_var1; //output => 30
         echo "</br>";
         echo $GLOBALS['my_var0'] + $GLOBALS['my_var1']; //output => 30
       }

       myFunc();
      }

      exemple(static){
        $rc = "</br>";

       function addOneLine(){
         static $varStat0 = 0;
         $varStat0++;
         echo "varStat(+1) = $varStat0";
       }
        
       echo "init varStat value = 0";
       echo $rc;
       addOneLine(); //output => varStat(+1) = 1
       echo $rc;
       addOneLine(); //output => varStat(+1) = 2
       echo $rc;
       addOneLine(); //output => varStat(+1) = 3
      }

    }
}

ARRAY{
  2D(proprietE => valeur){
    $my_array = array ("price_prod1" => 10000, "price_prod2" => 20000, "price_prod3" => 30000);

    //parcours du tableau(foreach)
    $i = 1;
    foreach($my_array as $prod => $price){
      echo "produit $i = $prod";
      echo "<br>";
      echo "prix $i = $price";
      $i++;
      echo "<br>";
    }
  }
}

OBJET{

  //creation d'une class
         class Student {

          //proprietes
          public $id;
          public $name;
          public $note;
          public $exam;

          //constructor
          function __construct ($id, $name, $exam, $note){
            $this->id = $id;
            $this->name = $name;
            $this->exam = $exam;
            $this->note = $note;
          }

          //method
          function resultExam(){

            if ($this->exam){ //passer a l'examen

              echo "<h2>** RESULTAT DE VOTRE EXAMEN **</h2><br><br>";
              echo "<strong> ID :</strong> $this->id<br><br>";
              echo "<strong> Nom/prenom(s) :</strong> $this->name<br><br>";

              //parcours des notes
              $stock = 0; //pour la moyenne
              foreach ($this->note as $module => $noteValue){
                echo "<strong>$module :</strong> $noteValue <br><br>";

                //calcul somme des notes
                $stock = $stock + $noteValue;
                $sum = $stock;
              }
              //output
              echo "TOTAL(notes) = $sum";
              $numModule = count($this->note); //nombre des notes
              $result = $sum/$numModule;
              echo "<br>MOYENNE = $result";

            }else{
              echo "Pas de resultat !";
            }

            //test passage
            if ($result >= 10){
              echo "<br><i>Vous etes ADMIS au niveau superieur !</i>";
            }else{
              echo "<br>Vous etes redoublant !";
            }


          }

         }

         //input (fakedata)
         $id1 = 1;
         $name1 = "RAKOTONIRINA Raja";
         $exam1 = true;
         $note1 = array("Note 1" => 13, "Note 2" => 7, "Note 3" => 10);

         $id2 = 2;
         $name2 = "RAMANANDRAIBE Kanto";
         $exam2 = true;
         $note2 = array("Note 1" => 15, "Note 2" => 10, "Note 3" => 12);
         
         //instance Etudiant
         $Student1 = new Student($id1, $name1, $exam1, $note1);
         $Student1->resultExam();

         $Student2 = new Student($id2, $name2, $exam2, $note2);
         $Student2->resultExam();

}

PHP+MYSQL{

  require{

  }

  isset{

  }

  mysqli_query{

  }

}